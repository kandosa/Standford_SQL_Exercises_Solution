Here's the schema:

Highschooler ( ID, name, grade )
English: There is a high school student with unique ID and a given first name in a certain grade.

Friend ( ID1, ID2 )
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123).

Likes ( ID1, ID2 )
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present.


Q1
Find the names of all students who are friends with someone named Gabriel.

select HighSchooler.name
from HighSchooler, HighSchooler as h, Friend
where HighSchooler.ID = Friend.ID1
and h.ID = Friend.ID2
and h.name = 'Gabriel'

Q2
For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like.

select HighSchooler.name, HighSchooler.grade, h.name, h.grade
from HighSchooler, Likes, HighSchooler as h
where HighSchooler.ID = Likes.ID1
and h.ID = Likes.ID2
and (HighSchooler.grade - h.grade) >1

Q3
For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order.

select distinct HighSchooler.name, HighSchooler.grade, h.name, h.grade
from HighSchooler, Likes, Likes as l, HighSchooler as h
where HighSchooler.ID = Likes.ID1
and Likes.ID2 = h.ID
and h.ID = l.ID1
and l.ID2 = HighSchooler.ID
and HighSchooler.name < h.name

Q4
Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade.

select distinct name, grade
from HighSchooler, Likes
where HighSchooler.ID not in (select Likes.ID1 from Likes)
and HighSchooler.ID not in (select Likes.ID2 from Likes)

Q5
For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades.

select h.name, h.grade, hh.name, hh.grade
from HighSchooler as h, HighSchooler as hh, Likes
where h.ID = Likes.ID1
and hh.ID = Likes.ID2
and hh.ID not in (select Likes.ID1 from Likes)

Q6
Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade.

select distinct h.name, h.grade
from HighSchooler as h, HighSchooler as hh, Friend as f
where h.ID = f.ID1
and hh.ID = f.ID2
and h.ID not in 
(
	select h.ID
	from HighSchooler as h, HighSchooler as hh, Friend as f
	where h.ID = f.ID1
	and hh.ID = f.ID2
	and h.grade != hh.grade
)
order by h.grade, h.name

Q7
For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C.

select distinct h.name, h.grade, hh.name, hh.grade, hhh.name, hhh.grade
from HighSchooler as h, HighSchooler as hh, HighSchooler as hhh, Friend as f, Likes as l
where h.ID = l.ID1
and hh.ID = l.ID2
and h.ID not in
(
	select Friend.ID2
	from Friend
	where Friend.ID1 = hh.ID
)
and hhh.ID in
(
	select Friend.ID2
	from Friend
	where Friend.ID1 = h.ID
)
and hhh.ID in
(
	select Friend.ID2
	from Friend
	where Friend.ID1 = hh.ID
)

Q8
Find the difference between the number of students in the school and the number of different first names.

select count(*)
- (
	select count(distinct name)
	from HighSchooler
) 
from HighSchooler

Q9
Find the name and grade of all students who are liked by more than one other student.

select distinct name, grade
from HighSchooler, Likes
where (
	select count(Likes.ID1)
	from Likes
	where Likes.ID2 = HighSchooler.ID
) > 1
